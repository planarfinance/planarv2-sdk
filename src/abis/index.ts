const EIP2612_ABI = ['function nonces(address owner) view returns (uint256)', 'function DOMAIN_SEPARATOR() view returns (bytes32)', 'function name() view returns (string)']
const BALANCEFETCHER_ABI = ['function getBalances(address _owner, address[] _tokens) view returns (uint256[] balances)']
const BLASTPOINTS_ABI = ['constructor()', 'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)', 'event PointsOperator(address contractAddress, address operator)', 'function adminConfigureBan(address contractAddress, bool banStatus)', 'function adminConfigureOperator(address contractAddress, address operator)', 'function banMap(address) view returns (bool)', 'function configurePointsOperator(address operator)', 'function configurePointsOperatorOnBehalf(address contractAddress, address newOperator)', 'function isAuthorized(address contractAddress) view returns (bool)', 'function isOperator(address contractAddress) view returns (bool)', 'function operatorMap(address) view returns (address)', 'function owner() view returns (address)', 'function readStatus(address contractAddress) view returns (address operator, bool isBanned, uint256 codeLength)', 'function renounceOwnership()', 'function transferOwnership(address newOwner)']
const BLAST_ABI = [
  'constructor(address _gasContract, address _yieldContract)',
  'function GAS_CONTRACT() view returns (address)',
  'function YIELD_CONTRACT() view returns (address)',
  'function claimAllGas(address contractAddress, address recipientOfGas) returns (uint256)',
  'function claimAllYield(address contractAddress, address recipientOfYield) returns (uint256)',
  'function claimGas(address contractAddress, address recipientOfGas, uint256 gasToClaim, uint256 gasSecondsToConsume) returns (uint256)',
  'function claimGasAtMinClaimRate(address contractAddress, address recipientOfGas, uint256 minClaimRateBips) returns (uint256)',
  'function claimMaxGas(address contractAddress, address recipientOfGas) returns (uint256)',
  'function claimYield(address contractAddress, address recipientOfYield, uint256 amount) returns (uint256)',
  'function configure(uint8 _yieldMode, uint8 _gasMode, address governor)',
  'function configureAutomaticYield()',
  'function configureAutomaticYieldOnBehalf(address contractAddress)',
  'function configureClaimableGas()',
  'function configureClaimableGasOnBehalf(address contractAddress)',
  'function configureClaimableYield()',
  'function configureClaimableYieldOnBehalf(address contractAddress)',
  'function configureContract(address contractAddress, uint8 _yieldMode, uint8 _gasMode, address _newGovernor)',
  'function configureGovernor(address _governor)',
  'function configureGovernorOnBehalf(address _newGovernor, address contractAddress)',
  'function configureVoidGas()',
  'function configureVoidGasOnBehalf(address contractAddress)',
  'function configureVoidYield()',
  'function configureVoidYieldOnBehalf(address contractAddress)',
  'function governorMap(address) view returns (address)',
  'function isAuthorized(address contractAddress) view returns (bool)',
  'function isGovernor(address contractAddress) view returns (bool)',
  'function readClaimableYield(address contractAddress) view returns (uint256)',
  'function readGasParams(address contractAddress) view returns (uint256, uint256, uint256, uint8)',
  'function readYieldConfiguration(address contractAddress) view returns (uint8)'
]
const DIVIDENDSV2_ABI = [
  'constructor(address xPlaneToken_, uint256 startTime_)',
  'event CollectorshipTransferred(address oldCollector, address newCollector)',
  'event CycleDividendsPercentUpdated(address indexed token, uint256 previousValue, uint256 newValue)',
  'event DistributedTokenDisabled(address indexed token)',
  'event DistributedTokenEnabled(address indexed token)',
  'event DistributedTokenRemoved(address indexed token)',
  'event DividendsAddedToPending(address indexed token, uint256 amount)',
  'event DividendsCollected(address indexed user, address indexed token, uint256 amount)',
  'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
  'event UserUpdated(address indexed user, uint256 previousBalance, uint256 newBalance)',
  'function BLAST() view returns (address)',
  'function BLASTPOINTS() view returns (address)',
  'function DEFAULT_CYCLE_DIVIDENDS_PERCENT() view returns (uint256)',
  'function MAX_CYCLE_DIVIDENDS_PERCENT() view returns (uint256)',
  'function MAX_DISTRIBUTED_TOKENS() view returns (uint256)',
  'function MIN_CYCLE_DIVIDENDS_PERCENT() view returns (uint256)',
  'function USDBBLAST() view returns (address)',
  'function WETHBLAST() view returns (address)',
  'function addDividendsToPending(address token, uint256 amount)',
  'function allocate(address userAddress, uint256 amount, bytes)',
  'function claimWethAndUsdbYield(address recipient, uint256 amount)',
  'function collector() view returns (address)',
  'function currentCycleStartTime() view returns (uint256)',
  'function cycleDurationSeconds() view returns (uint256)',
  'function deallocate(address userAddress, uint256 amount, bytes)',
  'function disableDistributedToken(address token)',
  'function distributedToken(uint256 index) view returns (address)',
  'function distributedTokensLength() view returns (uint256)',
  'function dividendsInfo(address) view returns (uint256 currentDistributionAmount, uint256 currentCycleDistributedAmount, uint256 pendingAmount, uint256 distributedAmount, uint256 accDividendsPerShare, uint256 lastUpdateTime, uint256 cycleDividendsPercent, bool distributionDisabled)',
  'function emergencyWithdraw(address token)',
  'function emergencyWithdrawAll()',
  'function enableDistributedToken(address token)',
  'function harvestAllDividends()',
  'function harvestDividends(address token)',
  'function isDistributedToken(address token) view returns (bool)',
  'function massUpdateDividendsInfo()',
  'function nextCycleStartTime() view returns (uint256)',
  'function owner() view returns (address)',
  'function pendingDividendsAmount(address token, address userAddress) view returns (uint256)',
  'function removeTokenFromDistributedTokens(address tokenToRemove)',
  'function renounceOwnership()',
  'function setCollector(address _collector)',
  'function totalAllocation() view returns (uint256)',
  'function transferOwnership(address newOwner)',
  'function updateCurrentCycleStartTime()',
  'function updateCycleDividendsPercent(address token, uint256 percent)',
  'function updateDividendsInfo(address token)',
  'function users(address, address) view returns (uint256 pendingDividends, uint256 rewardDebt)',
  'function usersAllocation(address) view returns (uint256)',
  'function xPlaneToken() view returns (address)'
]
const ERC20BYTES32_ABI = ['function name() view returns (bytes32)', 'function symbol() view returns (bytes32)']
const ERC20_ABI = ['constructor(string name_, string symbol_)', 'event Approval(address indexed owner, address indexed spender, uint256 value)', 'event Transfer(address indexed from, address indexed to, uint256 value)', 'function allowance(address owner, address spender) view returns (uint256)', 'function approve(address spender, uint256 amount) returns (bool)', 'function balanceOf(address account) view returns (uint256)', 'function decimals() view returns (uint8)', 'function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)', 'function increaseAllowance(address spender, uint256 addedValue) returns (bool)', 'function name() view returns (string)', 'function symbol() view returns (string)', 'function totalSupply() view returns (uint256)', 'function transfer(address recipient, uint256 amount) returns (bool)', 'function transferFrom(address sender, address recipient, uint256 amount) returns (bool)']
const FAIRAUCTION_ABI = [
  'constructor(address projectToken, address saleToken, address lpToken, uint256 startTime, uint256 endTime, address treasury_, uint256 maxToDistribute, uint256 minToRaise, uint256 maxToRaise, uint256 capPerWallet)',
  'event Buy(address indexed user, uint256 amount)',
  'event Claim(address indexed user, uint256 amount)',
  'event ClaimRefEarnings(address indexed user, uint256 amount)',
  'event CollectorshipTransferred(address oldCollector, address newCollector)',
  'event DiscountUpdated()',
  'event EmergencyWithdraw(address token, uint256 amount)',
  'event NewRefEarning(address referrer, uint256 amount)',
  'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
  'function BLAST() view returns (address)',
  'function BLASTPOINTS() view returns (address)',
  'function CAP_PER_WALLET() view returns (uint256)',
  'function END_TIME() view returns (uint256)',
  'function LP_TOKEN() view returns (address)',
  'function MAX_PROJECT_TOKENS_TO_DISTRIBUTE() view returns (uint256)',
  'function MAX_RAISE_AMOUNT() view returns (uint256)',
  'function MIN_TOTAL_RAISED_FOR_MAX_PROJECT_TOKEN() view returns (uint256)',
  'function PROJECT_TOKEN() view returns (address)',
  'function REFERRAL_SHARE() view returns (uint256)',
  'function SALE_TOKEN() view returns (address)',
  'function START_TIME() view returns (uint256)',
  'function USDBBLAST() view returns (address)',
  'function WETHBLAST() view returns (address)',
  'function burnUnsoldTokens()',
  'function buy(uint256 amount, address referralAddress)',
  'function buyETH(address referralAddress) payable',
  'function claim()',
  'function claimRefEarnings()',
  'function claimWethAndUsdbYield(address recipient, uint256 amount)',
  'function collector() view returns (address)',
  'function emergencyWithdrawFunds(address token, uint256 amount)',
  'function forceClaimable() view returns (bool)',
  'function getExpectedClaimAmount(address account) view returns (uint256)',
  'function getRemainingTime() view returns (uint256)',
  'function hasEnded() view returns (bool)',
  'function hasStarted() view returns (bool)',
  'function owner() view returns (address)',
  'function renounceOwnership()',
  'function setCollector(address _collector)',
  'function setForceClaimable()',
  'function setUsersDiscount(tuple(address account, uint256 discount, uint256 eligibleAmount)[] users)',
  'function tokensToDistribute() view returns (uint256)',
  'function totalAllocation() view returns (uint256)',
  'function totalRaised() view returns (uint256)',
  'function transferOwnership(address newOwner)',
  'function treasury() view returns (address)',
  'function unsoldTokensBurnt() view returns (bool)',
  'function userInfo(address) view returns (uint256 allocation, uint256 contribution, uint256 discount, uint256 discountEligibleAmount, address ref, uint256 refEarnings, uint256 claimedRefEarnings, bool hasClaimed)',
  'function weth() view returns (address)'
]
const HYPERPOOLFACTORY_ABI = [
  'constructor(address planeToken_, address xPlaneToken_, address emergencyRecoveryAddress_, address feeAddress_)',
  'event CreateHyperPool(address hyperAddress)',
  'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
  'event PublishHyperPool(address hyperAddress)',
  'event SetDefaultFee(uint256 fee)',
  'event SetEmergencyRecoveryAddress(address emergencyRecoveryAddress)',
  'event SetExemptedAddress(address exemptedAddress, bool isExempted)',
  'event SetFeeAddress(address feeAddress)',
  'event SetHyperPoolOwner(address previousOwner, address newOwner)',
  'function MAX_DEFAULT_FEE() view returns (uint256)',
  'function createHyperPool(address lpNftPoolAddress, address rewardsToken1, address rewardsToken2, tuple(uint256 startTime, uint256 endTime, uint256 harvestStartTime, uint256 depositEndTime, uint256 lockDurationReq, uint256 lockEndReq, uint256 depositAmountReq, bool whitelist, string description) settings) returns (address hyperPool)',
  'function defaultFee() view returns (uint256)',
  'function emergencyRecoveryAddress() view returns (address)',
  'function exemptedAddressesLength() view returns (uint256)',
  'function feeAddress() view returns (address)',
  'function getExemptedAddress(uint256 index) view returns (address)',
  'function getHyperPool(uint256 index) view returns (address)',
  'function getHyperPoolFee(address hyperPoolAddress, address ownerAddress) view returns (uint256)',
  'function getLpNftPoolPublishedHyperPool(address lpNftPoolAddress, uint256 index) view returns (address)',
  'function getOwnerHyperPool(address userAddress, uint256 index) view returns (address)',
  'function getPublishedHyperPool(uint256 index) view returns (address)',
  'function hyperPoolsLength() view returns (uint256)',
  'function isExemptedAddress(address checkedAddress) view returns (bool)',
  'function lpNftPoolPublishedHyperPoolsLength(address lpNftPoolAddress) view returns (uint256)',
  'function owner() view returns (address)',
  'function ownerHyperPoolsLength(address userAddress) view returns (uint256)',
  'function planeToken() view returns (address)',
  'function publishHyperPool(address lpNftAddress)',
  'function publishedHyperPoolsLength() view returns (uint256)',
  'function renounceOwnership()',
  'function setDefaultFee(uint256 newFee)',
  'function setEmergencyRecoveryAddress(address emergencyRecoveryAddress_)',
  'function setExemptedAddress(address exemptedAddress, bool isExempted)',
  'function setFeeAddress(address feeAddress_)',
  'function setHyperPoolOwner(address previousOwner, address newOwner)',
  'function transferOwnership(address newOwner)',
  'function xPlaneToken() view returns (address)'
]
const HYPERPOOL_ABI = [
  'constructor(address planeToken_, address xPlaneToken_, address owner_, address lpNftPool_, address rewardsToken1_, address rewardsToken2_, tuple(uint256 startTime, uint256 endTime, uint256 harvestStartTime, uint256 depositEndTime, uint256 lockDurationReq, uint256 lockEndReq, uint256 depositAmountReq, bool whitelist, string description) settings_)',
  'event ActivateEmergencyClose()',
  'event AddRewardsToken1(uint256 amount, uint256 feeAmount)',
  'event AddRewardsToken2(uint256 amount, uint256 feeAmount)',
  'event Deposit(address indexed userAddress, uint256 tokenId, uint256 amount)',
  'event EmergencyWithdraw(address indexed userAddress, uint256 tokenId, uint256 amount)',
  'event Harvest(address indexed userAddress, address rewardsToken, uint256 pending)',
  'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
  'event Publish()',
  'event SetCustomReqContract(address contractAddress)',
  'event SetDateSettings(uint256 endTime, uint256 harvestStartTime, uint256 depositEndTime)',
  'event SetDescription(string description)',
  'event SetRequirements(uint256 lockDurationReq, uint256 lockEndReq, uint256 depositAmountReq, bool whitelist)',
  'event SetRewardsToken2(address rewardsToken2)',
  'event UpdatePool()',
  'event WhitelistUpdated()',
  'event Withdraw(address indexed userAddress, uint256 tokenId, uint256 amount)',
  'event WithdrawRewardsToken1(uint256 amount, uint256 totalRewardsAmount)',
  'event WithdrawRewardsToken2(uint256 amount, uint256 totalRewardsAmount)',
  'function activateEmergencyClose()',
  'function addRewards(uint256 amountToken1, uint256 amountToken2)',
  'function creationTime() view returns (uint256)',
  'function customReqContract() view returns (address)',
  'function emergencyClose() view returns (bool)',
  'function emergencyWithdraw(uint256 tokenId)',
  'function factory() view returns (address)',
  'function harvest()',
  'function isWhitelisted(address account) view returns (bool)',
  'function lastRewardTime() view returns (uint256)',
  'function lpNftPool() view returns (address)',
  'function onERC721Received(address, address from, uint256 tokenId, bytes) returns (bytes4)',
  'function onLpNFTAddToPosition(address operator, uint256 tokenId, uint256 amount) returns (bool)',
  'function onLpNFTHarvest(address operator, address to, uint256 tokenId, uint256 planeAmount, uint256 xPlaneAmount) returns (bool)',
  'function onLpNFTWithdraw(address, uint256, uint256) pure returns (bool)',
  'function owner() view returns (address)',
  'function pendingRewards(address account) view returns (uint256 pending1, uint256 pending2)',
  'function planeToken() view returns (address)',
  'function publish()',
  'function publishTime() view returns (uint256)',
  'function published() view returns (bool)',
  'function renounceOwnership()',
  'function resetWhitelist()',
  'function rewardsToken1() view returns (address token, uint256 amount, uint256 remainingAmount, uint256 accRewardsPerShare)',
  'function rewardsToken1PerSecond() view returns (uint256)',
  'function rewardsToken2() view returns (address token, uint256 amount, uint256 remainingAmount, uint256 accRewardsPerShare)',
  'function rewardsToken2PerSecond() view returns (uint256)',
  'function setCustomReqContract(address contractAddress)',
  'function setDateSettings(uint256 endTime_, uint256 harvestStartTime_, uint256 depositEndTime_)',
  'function setDescription(string description)',
  'function setRequirements(uint256 lockDurationReq_, uint256 lockEndReq_, uint256 depositAmountReq_, bool whitelist_)',
  'function setRewardsToken2(address rewardsToken2_)',
  'function setWhitelist(tuple(address account, bool status)[] whitelistStatuses)',
  'function settings() view returns (uint256 startTime, uint256 endTime, uint256 harvestStartTime, uint256 depositEndTime, uint256 lockDurationReq, uint256 lockEndReq, uint256 depositAmountReq, bool whitelist, string description)',
  'function tokenIdOwner(uint256) view returns (address)',
  'function totalDepositAmount() view returns (uint256)',
  'function transferOwnership(address newOwner)',
  'function updatePool()',
  'function userInfo(address) view returns (uint256 totalDepositAmount, uint256 rewardDebtToken1, uint256 rewardDebtToken2, uint256 pendingRewardsToken1, uint256 pendingRewardsToken2)',
  'function userTokenId(address account, uint256 index) view returns (uint256)',
  'function userTokenIdsLength(address account) view returns (uint256)',
  'function whitelistAddress(uint256 index) view returns (address)',
  'function whitelistLength() view returns (uint256)',
  'function withdraw(uint256 tokenId)',
  'function withdrawRewards(uint256 amountToken1, uint256 amountToken2)',
  'function xPlaneToken() view returns (address)'
]
const LAUNCHPAD_ABI = [
  'constructor(address xPlaneToken_)',
  'event Allocate(address indexed userAddress, uint256 amount)',
  'event Approval(address indexed owner, address indexed spender, uint256 value)',
  'event CollectorshipTransferred(address oldCollector, address newCollector)',
  'event Deallocate(address indexed userAddress, uint256 amount)',
  'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
  'event Snapshot(uint256 id)',
  'event Transfer(address indexed from, address indexed to, uint256 value)',
  'event UpdateDeallocationCooldown(uint256 newDuration)',
  'function BLAST() view returns (address)',
  'function BLASTPOINTS() view returns (address)',
  'function USDBBLAST() view returns (address)',
  'function WETHBLAST() view returns (address)',
  'function allocate(address userAddress, uint256 amount, bytes)',
  'function allowance(address owner, address spender) view returns (uint256)',
  'function approve(address spender, uint256 amount) returns (bool)',
  'function balanceOf(address account) view returns (uint256)',
  'function balanceOfAt(address account, uint256 snapshotId) view returns (uint256)',
  'function claimWethAndUsdbYield(address recipient, uint256 amount)',
  'function collector() view returns (address)',
  'function deallocate(address userAddress, uint256 amount, bytes)',
  'function deallocationCooldown() view returns (uint256)',
  'function decimals() view returns (uint8)',
  'function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)',
  'function getUserInfo(address userAddress) view returns (uint256 allocation, uint256 allocationTime)',
  'function increaseAllowance(address spender, uint256 addedValue) returns (bool)',
  'function name() view returns (string)',
  'function owner() view returns (address)',
  'function renounceOwnership()',
  'function setCollector(address _collector)',
  'function snapshot()',
  'function symbol() view returns (string)',
  'function totalAllocation() view returns (uint256)',
  'function totalSupply() view returns (uint256)',
  'function totalSupplyAt(uint256 snapshotId) view returns (uint256)',
  'function transfer(address recipient, uint256 amount) returns (bool)',
  'function transferFrom(address sender, address recipient, uint256 amount) returns (bool)',
  'function transferOwnership(address newOwner)',
  'function updateDeallocationCooldown(uint256 duration)',
  'function usersAllocation(address) view returns (uint256 allocation, uint256 allocationTime)',
  'function xPlaneToken() view returns (address)'
]
const LPNFTPOOLFACTORY_ABI = ['constructor(address master_, address planeToken_, address xPlaneToken_)', 'event PoolCreated(address indexed lpToken, address pool)', 'function createPool(address lpToken) returns (address pool)', 'function getPool(address) view returns (address)', 'function master() view returns (address)', 'function planeToken() view returns (address)', 'function pools(uint256) view returns (address)', 'function poolsLength() view returns (uint256)', 'function xPlaneToken() view returns (address)']
const LPNFTPOOL_ABI = [
  'constructor()',
  'event AddToPosition(uint256 indexed tokenId, address user, uint256 amount)',
  'event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)',
  'event ApprovalForAll(address indexed owner, address indexed operator, bool approved)',
  'event CollectorshipTransferred(address oldCollector, address newCollector)',
  'event CreatePosition(uint256 indexed tokenId, uint256 amount, uint256 lockDuration)',
  'event EmergencyWithdraw(uint256 indexed tokenId, uint256 amount)',
  'event HarvestPosition(uint256 indexed tokenId, address to, uint256 pending)',
  'event LockPosition(uint256 indexed tokenId, uint256 lockDuration)',
  'event MergePositions(address indexed user, uint256[] tokenIds)',
  'event PoolUpdated(uint256 lastRewardTime, uint256 accRewardsPerShare)',
  'event SetBoost(uint256 indexed tokenId, uint256 boostPoints)',
  'event SetBoostMultiplierSettings(uint256 maxGlobalMultiplier, uint256 maxBoostMultiplier)',
  'event SetEmergencyUnlock(bool emergencyUnlock)',
  'event SetLockMultiplierSettings(uint256 maxLockDuration, uint256 maxLockMultiplier)',
  'event SetOperator(address operator)',
  'event SetUnlockOperator(address operator, bool isAdded)',
  'event SetXPlaneRewardsShare(uint256 xPlaneRewardsShare)',
  'event SplitPosition(uint256 indexed tokenId, uint256 splitAmount, uint256 newTokenId)',
  'event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)',
  'event WithdrawFromPosition(uint256 indexed tokenId, uint256 amount)',
  'function BLAST() view returns (address)',
  'function BLASTPOINTS() view returns (address)',
  'function MAX_BOOST_MULTIPLIER_LIMIT() view returns (uint256)',
  'function MAX_GLOBAL_MULTIPLIER_LIMIT() view returns (uint256)',
  'function MAX_LOCK_MULTIPLIER_LIMIT() view returns (uint256)',
  'function USDBBLAST() view returns (address)',
  'function WETHBLAST() view returns (address)',
  'function addToPosition(uint256 tokenId, uint256 amountToAdd)',
  'function approve(address to, uint256 tokenId)',
  'function balanceOf(address owner) view returns (uint256)',
  'function baseURI() view returns (string)',
  'function boost(uint256 tokenId, uint256 amount)',
  'function claimWethAndUsdbYield(address recipient, uint256 amount)',
  'function collector() view returns (address)',
  'function createPosition(uint256 amount, uint256 lockDuration)',
  'function emergencyUnlock() view returns (bool)',
  'function emergencyWithdraw(uint256 tokenId)',
  'function exists(uint256 tokenId) view returns (bool)',
  'function factory() view returns (address)',
  'function getApproved(uint256 tokenId) view returns (address)',
  'function getMultiplierByBoostPoints(uint256 amount, uint256 boostPoints) view returns (uint256)',
  'function getMultiplierByLockDuration(uint256 lockDuration) view returns (uint256)',
  'function getMultiplierSettings() view returns (uint256 maxGlobalMultiplier, uint256 maxLockDuration, uint256 maxLockMultiplier, uint256 maxBoostMultiplier)',
  'function getPoolInfo() view returns (address lpToken, address planeToken, address xPlaneToken, uint256 lastRewardTime, uint256 accRewardsPerShare, uint256 lpSupply, uint256 lpSupplyWithMultiplier, uint256 allocPoint)',
  'function getStakingPosition(uint256 tokenId) view returns (uint256 amount, uint256 amountWithMultiplier, uint256 startLockTime, uint256 lockDuration, uint256 lockMultiplier, uint256 rewardDebt, uint256 boostPoints, uint256 totalMultiplier)',
  'function harvestPosition(uint256 tokenId)',
  'function harvestPositionTo(uint256 tokenId, address to)',
  'function harvestPositionsTo(uint256[] tokenIds, address to)',
  'function hasDeposits() view returns (bool)',
  'function initialize(address master_, address planeToken, address xPlaneToken, address lpToken)',
  'function initialized() view returns (bool)',
  'function isApprovedForAll(address owner, address operator) view returns (bool)',
  'function isUnlockOperator(address _operator) view returns (bool)',
  'function isUnlocked() view returns (bool)',
  'function lastTokenId() view returns (uint256)',
  'function lockPosition(uint256 tokenId, uint256 lockDuration)',
  'function master() view returns (address)',
  'function mergePositions(uint256[] tokenIds, uint256 lockDuration)',
  'function name() view returns (string)',
  'function operator() view returns (address)',
  'function owner() view returns (address)',
  'function ownerOf(uint256 tokenId) view returns (address)',
  'function pendingRewards(uint256 tokenId) view returns (uint256)',
  'function renewLockPosition(uint256 tokenId)',
  'function safeTransferFrom(address from, address to, uint256 tokenId)',
  'function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)',
  'function setApprovalForAll(address operator, bool approved)',
  'function setBoostMultiplierSettings(uint256 maxGlobalMultiplier, uint256 maxBoostMultiplier)',
  'function setCollector(address _collector)',
  'function setEmergencyUnlock(bool emergencyUnlock_)',
  'function setLockMultiplierSettings(uint256 maxLockDuration, uint256 maxLockMultiplier)',
  'function setOperator(address operator_)',
  'function setUnlockOperator(address _operator, bool add)',
  'function setXPlaneRewardsShare(uint256 xPlaneRewardsShare_)',
  'function splitPosition(uint256 tokenId, uint256 splitAmount)',
  'function supportsInterface(bytes4 interfaceId) view returns (bool)',
  'function symbol() view returns (string)',
  'function tokenByIndex(uint256 index) view returns (uint256)',
  'function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)',
  'function tokenURI(uint256 tokenId) view returns (string)',
  'function totalSupply() view returns (uint256)',
  'function transferFrom(address from, address to, uint256 tokenId)',
  'function unboost(uint256 tokenId, uint256 amount)',
  'function unlockOperator(uint256 index) view returns (address)',
  'function unlockOperatorsLength() view returns (uint256)',
  'function updatePool()',
  'function withdrawFromPosition(uint256 tokenId, uint256 amountToWithdraw)',
  'function xPlaneRewardsShare() view returns (uint256)',
  'function yieldBooster() view returns (address)'
]
const MULTICALL3_ABI = [
  'function aggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes[] returnData)',
  'function aggregate3(tuple(address target, bool allowFailure, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)',
  'function aggregate3Value(tuple(address target, bool allowFailure, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)',
  'function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)',
  'function getBasefee() view returns (uint256 basefee)',
  'function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)',
  'function getBlockNumber() view returns (uint256 blockNumber)',
  'function getChainId() view returns (uint256 chainid)',
  'function getCurrentBlockCoinbase() view returns (address coinbase)',
  'function getCurrentBlockDifficulty() view returns (uint256 difficulty)',
  'function getCurrentBlockGasLimit() view returns (uint256 gaslimit)',
  'function getCurrentBlockTimestamp() view returns (uint256 timestamp)',
  'function getEthBalance(address addr) view returns (uint256 balance)',
  'function getLastBlockHash() view returns (bytes32 blockHash)',
  'function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)',
  'function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)'
]
const PLANARLIQUIDITYPOOLFACTORY_ABI = [
  'constructor(address feeTo_)',
  'event FeePercentOwnershipTransferred(address indexed prevOwner, address indexed newOwner)',
  'event FeeToTransferred(address indexed prevFeeTo, address indexed newFeeTo)',
  'event OwnerFeeShareUpdated(uint256 prevOwnerFeeShare, uint256 ownerFeeShare)',
  'event OwnershipTransferred(address indexed prevOwner, address indexed newOwner)',
  'event PairCreated(address indexed token0, address indexed token1, address pair, uint256 length)',
  'event ReferrerFeeShareUpdated(address referrer, uint256 prevReferrerFeeShare, uint256 referrerFeeShare)',
  'event SetStableOwnershipTransferred(address indexed prevOwner, address indexed newOwner)',
  'function OWNER_FEE_SHARE_MAX() view returns (uint256)',
  'function REFERER_FEE_SHARE_MAX() view returns (uint256)',
  'function allPairs(uint256) view returns (address)',
  'function allPairsLength() view returns (uint256)',
  'function createPair(address tokenA, address tokenB) returns (address pair)',
  'function feeInfo() view returns (uint256 _ownerFeeShare, address _feeTo)',
  'function feePercentOwner() view returns (address)',
  'function feeTo() view returns (address)',
  'function getPair(address, address) view returns (address)',
  'function owner() view returns (address)',
  'function ownerFeeShare() view returns (uint256)',
  'function referrersFeeShare(address) view returns (uint256)',
  'function setFeePercentOwner(address _feePercentOwner)',
  'function setFeeTo(address _feeTo)',
  'function setOwner(address _owner)',
  'function setOwnerFeeShare(uint256 newOwnerFeeShare)',
  'function setReferrerFeeShare(address referrer, uint256 referrerFeeShare)',
  'function setSetStableOwner(address _setStableOwner)',
  'function setStableOwner() view returns (address)'
]
const PLANARLIQUIDITYPOOLROUTER_ABI = [
  'constructor(address _factory, address _WETH)',
  'event CollectorshipTransferred(address oldCollector, address newCollector)',
  'function BLAST() view returns (address)',
  'function BLASTPOINTS() view returns (address)',
  'function USDBBLAST() view returns (address)',
  'function WETH() view returns (address)',
  'function WETHBLAST() view returns (address)',
  'function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) returns (uint256 amountA, uint256 amountB, uint256 liquidity)',
  'function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)',
  'function claimWethAndUsdbYield(address recipient, uint256 amount)',
  'function collector() view returns (address)',
  'function factory() view returns (address)',
  'function getAmountsOut(uint256 amountIn, address[] path) view returns (uint256[] amounts)',
  'function getPair(address token1, address token2) view returns (address)',
  'function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) pure returns (uint256 amountB)',
  'function removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) returns (uint256 amountA, uint256 amountB)',
  'function removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) returns (uint256 amountToken, uint256 amountETH)',
  'function removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) returns (uint256 amountETH)',
  'function removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountToken, uint256 amountETH)',
  'function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountETH)',
  'function removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountA, uint256 amountB)',
  'function setCollector(address _collector)',
  'function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] path, address to, address referrer, uint256 deadline) payable',
  'function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, address referrer, uint256 deadline)',
  'function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, address referrer, uint256 deadline)'
]
const PLANARLIQUIDITYPOOL_ABI = [
  'constructor()',
  'event Approval(address indexed owner, address indexed spender, uint256 value)',
  'event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to)',
  'event CollectorshipTransferred(address oldCollector, address newCollector)',
  'event DrainWrongToken(address indexed token, address to)',
  'event FeePercentUpdated(uint16 token0FeePercent, uint16 token1FeePercent)',
  'event Mint(address indexed sender, uint256 amount0, uint256 amount1)',
  'event SetPairTypeImmutable()',
  'event SetStableSwap(bool prevStableSwap, bool stableSwap)',
  'event Skim()',
  'event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to)',
  'event Sync(uint112 reserve0, uint112 reserve1)',
  'event Transfer(address indexed from, address indexed to, uint256 value)',
  'function BLAST() view returns (address)',
  'function BLASTPOINTS() view returns (address)',
  'function DOMAIN_SEPARATOR() view returns (bytes32)',
  'function FEE_DENOMINATOR() view returns (uint256)',
  'function MAX_FEE_PERCENT() view returns (uint256)',
  'function MINIMUM_LIQUIDITY() view returns (uint256)',
  'function PERMIT_TYPEHASH() view returns (bytes32)',
  'function USDBBLAST() view returns (address)',
  'function WETHBLAST() view returns (address)',
  'function allowance(address, address) view returns (uint256)',
  'function approve(address spender, uint256 value) returns (bool)',
  'function balanceOf(address) view returns (uint256)',
  'function burn(address to) returns (uint256 amount0, uint256 amount1)',
  'function claimWethAndUsdbYield(address recipient, uint256 amount)',
  'function collector() view returns (address)',
  'function decimals() view returns (uint8)',
  'function drainWrongToken(address token, address to)',
  'function factory() view returns (address)',
  'function getAmountOut(uint256 amountIn, address tokenIn) view returns (uint256)',
  'function getReserves() view returns (uint112 _reserve0, uint112 _reserve1, uint16 _token0FeePercent, uint16 _token1FeePercent)',
  'function initialize(address _token0, address _token1)',
  'function initialized() view returns (bool)',
  'function kLast() view returns (uint256)',
  'function mint(address to) returns (uint256 liquidity)',
  'function name() view returns (string)',
  'function nonces(address) view returns (uint256)',
  'function pairTypeImmutable() view returns (bool)',
  'function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)',
  'function precisionMultiplier0() view returns (uint256)',
  'function precisionMultiplier1() view returns (uint256)',
  'function setCollector(address _collector)',
  'function setFeePercent(uint16 newToken0FeePercent, uint16 newToken1FeePercent)',
  'function setPairTypeImmutable()',
  'function setStableSwap(bool stable, uint112 expectedReserve0, uint112 expectedReserve1)',
  'function skim(address to)',
  'function stableSwap() view returns (bool)',
  'function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data)',
  'function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data, address referrer)',
  'function symbol() view returns (string)',
  'function sync()',
  'function token0() view returns (address)',
  'function token0FeePercent() view returns (uint16)',
  'function token1() view returns (address)',
  'function token1FeePercent() view returns (uint16)',
  'function totalSupply() view returns (uint256)',
  'function transfer(address to, uint256 value) returns (bool)',
  'function transferFrom(address from, address to, uint256 value) returns (bool)'
]
const PLANARMASTER_ABI = [
  'constructor(address planeToken_, uint256 startTime_)',
  'event ClaimRewards(address indexed poolAddress, uint256 amount)',
  'event CollectorshipTransferred(address oldCollector, address newCollector)',
  'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
  'event PoolAdded(address indexed poolAddress, uint256 allocPoint)',
  'event PoolSet(address indexed poolAddress, uint256 allocPoint)',
  'event PoolUpdated(address indexed poolAddress, uint256 reserve, uint256 lastRewardTime)',
  'event SetEmergencyUnlock(bool emergencyUnlock)',
  'event SetYieldBooster(address previousYieldBooster, address newYieldBooster)',
  'function BLAST() view returns (address)',
  'function BLASTPOINTS() view returns (address)',
  'function USDBBLAST() view returns (address)',
  'function WETHBLAST() view returns (address)',
  'function activePoolsLength() view returns (uint256)',
  'function add(address nftPool, uint256 allocPoint, bool withUpdate)',
  'function claimRewards() returns (uint256 rewardsAmount)',
  'function claimWethAndUsdbYield(address recipient, uint256 amount)',
  'function collector() view returns (address)',
  'function emergencyUnlock() view returns (bool)',
  'function emissionRate() view returns (uint256)',
  'function getActivePoolAddressByIndex(uint256 index) view returns (address)',
  'function getPoolAddressByIndex(uint256 index) view returns (address)',
  'function getPoolInfo(address poolAddress_) view returns (address poolAddress, uint256 allocPoint, uint256 lastRewardTime, uint256 reserve, uint256 poolEmissionRate)',
  'function massUpdatePools()',
  'function owner() view returns (address)',
  'function planeToken() view returns (address)',
  'function poolsLength() view returns (uint256)',
  'function renounceOwnership()',
  'function set(address poolAddress, uint256 allocPoint, bool withUpdate)',
  'function setCollector(address _collector)',
  'function setEmergencyUnlock(bool emergencyUnlock_)',
  'function setYieldBooster(address yieldBooster_)',
  'function startTime() view returns (uint256)',
  'function totalAllocPoint() view returns (uint256)',
  'function transferOwnership(address newOwner)',
  'function updatePool(address nftPool)',
  'function yieldBooster() view returns (address)'
]
const PLANARTESTNETTOKENFACTORY_ABI = ['event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)', 'event TokenCreated(address tokenAddress, string name, string symbol, uint256 maxSupply)', 'function createTestnetToken(string name, string symbol, uint256 maxSupply)', 'function deployedTokens(uint256) view returns (address)', 'function getDeployedTokens() view returns (address[])', 'function owner() view returns (address)', 'function renounceOwnership()', 'function transferOwnership(address newOwner)']
const PLANARTESTNETTOKENFAUCET_ABI = ['event ClaimAmountUpdated(uint256 newAmount)', 'event OwnerWithdrawal(address indexed token, uint256 amount)', 'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)', 'event TokensClaimed(address indexed by, address indexed token, uint256 amount)', 'function addToken(address _token)', 'function canClaim() view returns (bool)', 'function claimAllTestnetTokens()', 'function claimAmount() view returns (uint256)', 'function getSupportedTokens() view returns (address[])', 'function hasClaimed(address) view returns (bool)', 'function owner() view returns (address)', 'function ownerWithdraw(address _token, uint256 _amount)', 'function removeToken(address _token)', 'function renounceOwnership()', 'function setClaimAmount(uint256 _amount)', 'function supportedTokens(uint256) view returns (address)', 'function transferOwnership(address newOwner)']
const PLANARTESTNETTOKEN_ABI = [
  'constructor(string name, string symbol, uint256 maxSupply, address owner)',
  'event Approval(address indexed owner, address indexed spender, uint256 value)',
  'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
  'event Transfer(address indexed from, address indexed to, uint256 value)',
  'function allowance(address owner, address spender) view returns (uint256)',
  'function approve(address spender, uint256 amount) returns (bool)',
  'function balanceOf(address account) view returns (uint256)',
  'function decimals() view returns (uint8)',
  'function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)',
  'function increaseAllowance(address spender, uint256 addedValue) returns (bool)',
  'function name() view returns (string)',
  'function owner() view returns (address)',
  'function renounceOwnership()',
  'function symbol() view returns (string)',
  'function totalSupply() view returns (uint256)',
  'function transfer(address recipient, uint256 amount) returns (bool)',
  'function transferFrom(address sender, address recipient, uint256 amount) returns (bool)',
  'function transferOwnership(address newOwner)'
]
const PLANETOKEN_ABI = [
  'constructor(uint256 maxSupply_, uint256 initialSupply, uint256 initialEmissionRate, address treasuryAddress_)',
  'event AllocationsDistributed(uint256 masterShare, uint256 treasuryShare)',
  'event Approval(address indexed owner, address indexed spender, uint256 value)',
  'event ClaimMasterRewards(uint256 amount)',
  'event CollectorshipTransferred(address oldCollector, address newCollector)',
  'event InitializeEmissionStart(uint256 startTime)',
  'event InitializeMasterAddress(address masterAddress)',
  'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
  'event Transfer(address indexed from, address indexed to, uint256 value)',
  'event UpdateAllocations(uint256 farmingAllocation, uint256 legacyAllocation, uint256 treasuryAllocation)',
  'event UpdateEmissionRate(uint256 previousEmissionRate, uint256 newEmissionRate)',
  'event UpdateMaxSupply(uint256 previousMaxSupply, uint256 newMaxSupply)',
  'event UpdateTreasuryAddress(address previousTreasuryAddress, address newTreasuryAddress)',
  'function ALLOCATION_PRECISION() view returns (uint256)',
  'function BLAST() view returns (address)',
  'function BLASTPOINTS() view returns (address)',
  'function BURN_ADDRESS() view returns (address)',
  'function MAX_EMISSION_RATE() view returns (uint256)',
  'function MAX_SUPPLY_LIMIT() view returns (uint256)',
  'function USDBBLAST() view returns (address)',
  'function WETHBLAST() view returns (address)',
  'function allowance(address owner, address spender) view returns (uint256)',
  'function approve(address spender, uint256 amount) returns (bool)',
  'function balanceOf(address account) view returns (uint256)',
  'function burn(uint256 amount)',
  'function claimMasterRewards(uint256 amount) returns (uint256 effectiveAmount)',
  'function claimWethAndUsdbYield(address recipient, uint256 amount)',
  'function collector() view returns (address)',
  'function decimals() view returns (uint8)',
  'function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)',
  'function elasticMaxSupply() view returns (uint256)',
  'function emissionRate() view returns (uint256)',
  'function emitAllocations()',
  'function farmingAllocation() view returns (uint256)',
  'function increaseAllowance(address spender, uint256 addedValue) returns (bool)',
  'function initializeEmissionStart(uint256 startTime)',
  'function initializeMasterAddress(address masterAddress_)',
  'function lastEmissionTime() view returns (uint256)',
  'function legacyAllocation() view returns (uint256)',
  'function masterAddress() view returns (address)',
  'function masterAllocation() view returns (uint256)',
  'function masterEmissionRate() view returns (uint256)',
  'function masterReserve() view returns (uint256)',
  'function name() view returns (string)',
  'function owner() view returns (address)',
  'function renounceOwnership()',
  'function setCollector(address _collector)',
  'function symbol() view returns (string)',
  'function totalSupply() view returns (uint256)',
  'function transfer(address recipient, uint256 amount) returns (bool)',
  'function transferFrom(address sender, address recipient, uint256 amount) returns (bool)',
  'function transferOwnership(address newOwner)',
  'function treasuryAddress() view returns (address)',
  'function treasuryAllocation() view returns (uint256)',
  'function updateAllocations(uint256 farmingAllocation_, uint256 legacyAllocation_)',
  'function updateEmissionRate(uint256 emissionRate_)',
  'function updateMaxSupply(uint256 maxSupply_)',
  'function updateTreasuryAddress(address treasuryAddress_)'
]
const POSITIONHELPER_ABI = [
  'constructor(address router_, address weth_)',
  'event CollectorshipTransferred(address oldCollector, address newCollector)',
  'function BLAST() view returns (address)',
  'function BLASTPOINTS() view returns (address)',
  'function USDBBLAST() view returns (address)',
  'function WETHBLAST() view returns (address)',
  'function addLiquidityAndCreatePosition(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, uint256 deadline, address to, address lpNftPool, uint256 lockDuration)',
  'function addLiquidityETHAndCreatePosition(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, uint256 deadline, address to, address lpNftPool, uint256 lockDuration) payable',
  'function claimWethAndUsdbYield(address recipient, uint256 amount)',
  'function collector() view returns (address)',
  'function onERC721Received(address, address from, uint256 tokenId, bytes) view returns (bytes4)',
  'function router() view returns (address)',
  'function setCollector(address _collector)',
  'function weth() view returns (address)'
]
const PRESALE_ABI = [
  'constructor(address planeToken, address xPlaneToken, address saleToken, address lpToken, uint256 startTime, uint256 endTime, address treasury_)',
  'event Buy(address indexed user, uint256 amount)',
  'event Claim(address indexed user, uint256 planeAmount, uint256 xPlaneAmount)',
  'event ClaimRefEarnings(address indexed user, uint256 amount)',
  'event CollectorshipTransferred(address oldCollector, address newCollector)',
  'event DiscountUpdated()',
  'event EmergencyWithdraw(address token, uint256 amount)',
  'event NewRefEarning(address referrer, uint256 amount)',
  'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
  'function BLAST() view returns (address)',
  'function BLASTPOINTS() view returns (address)',
  'function END_TIME() view returns (uint256)',
  'function LP_TOKEN() view returns (address)',
  'function MAX_PLANE_TO_DISTRIBUTE() view returns (uint256)',
  'function MIN_TOTAL_RAISED_FOR_MAX_PLANE() view returns (uint256)',
  'function PLANE() view returns (address)',
  'function REFERRAL_SHARE() view returns (uint256)',
  'function SALE_TOKEN() view returns (address)',
  'function START_TIME() view returns (uint256)',
  'function USDBBLAST() view returns (address)',
  'function WETHBLAST() view returns (address)',
  'function XPLANE() view returns (address)',
  'function XPLANE_SHARE() view returns (uint256)',
  'function burnUnsoldTokens()',
  'function buy(uint256 amount, address referralAddress)',
  'function buyETH(address referralAddress) payable',
  'function claim()',
  'function claimRefEarnings()',
  'function claimWethAndUsdbYield(address recipient, uint256 amount)',
  'function collector() view returns (address)',
  'function emergencyWithdrawFunds(address token, uint256 amount)',
  'function getExpectedClaimAmounts(address account) view returns (uint256 planeAmount, uint256 xPlaneAmount)',
  'function getRemainingTime() view returns (uint256)',
  'function hasEnded() view returns (bool)',
  'function hasStarted() view returns (bool)',
  'function owner() view returns (address)',
  'function planeToDistribute() view returns (uint256)',
  'function renounceOwnership()',
  'function setCollector(address _collector)',
  'function setUsersDiscount(tuple(address account, uint256 discount, uint256 eligibleAmount)[] users)',
  'function totalAllocation() view returns (uint256)',
  'function totalRaised() view returns (uint256)',
  'function transferOwnership(address newOwner)',
  'function treasury() view returns (address)',
  'function unsoldTokensBurnt() view returns (bool)',
  'function userInfo(address) view returns (uint256 allocation, uint256 contribution, uint256 discount, uint256 discountEligibleAmount, address ref, uint256 refEarnings, uint256 claimedRefEarnings, bool hasClaimed)',
  'function weth() view returns (address)'
]
const PRICECONSUMERV3_ABI = [
  'constructor(address _factory, address _WETH, address _USD, address _PLANE, uint256 usdDecimals)',
  'event SetLastPLANEPrice(uint256 lastPLANEPrice, uint256 newPrice)',
  'event SetOwner(address prevOwner, address newOwner)',
  'event SetTokenPriceFeeder(address token, address quote, address priceFeeder)',
  'event SetTokenQuote(address token, address quote)',
  'event SetWhitelistToken(address token, bool isWhitelisted)',
  'function PLANE() view returns (address)',
  'function USD() view returns (address)',
  'function USD_DECIMALS() view returns (uint256)',
  'function WETH() view returns (address)',
  'function factory() view returns (address)',
  'function getPLANEMaxPriceUSD() returns (uint256)',
  'function getTokenFairPriceUSD(address token) view returns (uint256)',
  'function getTokenMinPriceUSD(address token) view returns (uint256)',
  'function getTokenPriceUSDUsingPair(address token) view returns (uint256)',
  'function lastPLANEPrice() view returns (uint256)',
  'function owner() view returns (address)',
  'function setLastPLANEPrice(uint256 price, uint256 decimals)',
  'function setOwner(address _owner)',
  'function setTokenPriceFeeder(address token, address quote, address priceFeeder)',
  'function setTokenQuote(address token, address quote)',
  'function tokenPriceFeeder(address, address) view returns (address)',
  'function tokensQuote(address) view returns (address)',
  'function valueOfTokenUSD(address token) view returns (uint256 valueInUSD)'
]
const PROTOCOLEARNINGS_ABI = [
  'constructor(address dividends, address buyback, address operating)',
  'event CollectorshipTransferred(address oldCollector, address newCollector)',
  'event Distribute(address token, uint256 dividendsAmount, uint256 buybackAndBurnAmount, uint256 operatingAmount)',
  'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
  'function BLAST() view returns (address)',
  'function BLASTPOINTS() view returns (address)',
  'function USDBBLAST() view returns (address)',
  'function WETHBLAST() view returns (address)',
  'function buybackAndBurnShare() view returns (uint256)',
  'function buybackAndBurnWallet() view returns (address)',
  'function claimWethAndUsdbYield(address recipient, uint256 amount)',
  'function collector() view returns (address)',
  'function distributeShares(address token)',
  'function dividendsShare() view returns (uint256)',
  'function dividendsWallet() view returns (address)',
  'function operatingFundsWallet() view returns (address)',
  'function owner() view returns (address)',
  'function renounceOwnership()',
  'function safeEmergencyWithdraw(address token, address to)',
  'function setCollector(address _collector)',
  'function sharePrecision() view returns (uint256)',
  'function transferOwnership(address newOwner)',
  'function updateBuybackAndBurnWallet(address newWallet)',
  'function updateDevelopmentFundsWallet(address newWallet)',
  'function updateDividendsWallet(address newWallet)',
  'function updateShares(uint256 dividendsShare_, uint256 buybackAndBurnShare_)'
]
const REFUND_ABI = [
  'event CollectorshipTransferred(address oldCollector, address newCollector)',
  'event EmergencyWithdraw(address token, uint256 amount)',
  'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
  'event RefundUser(address user, uint256 amount)',
  'function BLAST() view returns (address)',
  'function BLASTPOINTS() view returns (address)',
  'function USDBBLAST() view returns (address)',
  'function WETHBLAST() view returns (address)',
  'function claim()',
  'function claimWethAndUsdbYield(address recipient, uint256 amount)',
  'function collector() view returns (address)',
  'function emergencyWithdrawFunds(address token, uint256 amount)',
  'function open() view returns (bool)',
  'function owner() view returns (address)',
  'function renounceOwnership()',
  'function setCollector(address _collector)',
  'function setOpen(bool value)',
  'function setUsersClaimableAmount(tuple(address account, uint256 amount)[] users)',
  'function transferOwnership(address newOwner)',
  'function userInfo(address) view returns (uint256 amountToClaim, uint256 claimedAmount)',
  'function userRemainingAmountToClaim(address userAddress) view returns (uint256)',
  'function weth() view returns (address)'
]
const UNISWAPINTERFACEMULTICALL_ABI = ['function getCurrentBlockTimestamp() view returns (uint256 timestamp)', 'function getEthBalance(address addr) view returns (uint256 balance)', 'function multicall(tuple(address target, uint256 gasLimit, bytes callData)[] calls) returns (uint256 blockNumber, tuple(bool success, uint256 gasUsed, bytes returnData)[] returnData)']
const UNISWAPV2ERC20_ABI = ['constructor()', 'event Approval(address indexed owner, address indexed spender, uint256 value)', 'event Transfer(address indexed from, address indexed to, uint256 value)', 'function DOMAIN_SEPARATOR() view returns (bytes32)', 'function PERMIT_TYPEHASH() view returns (bytes32)', 'function allowance(address, address) view returns (uint256)', 'function approve(address spender, uint256 value) returns (bool)', 'function balanceOf(address) view returns (uint256)', 'function decimals() view returns (uint8)', 'function name() view returns (string)', 'function nonces(address) view returns (uint256)', 'function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)', 'function symbol() view returns (string)', 'function totalSupply() view returns (uint256)', 'function transfer(address to, uint256 value) returns (bool)', 'function transferFrom(address from, address to, uint256 value) returns (bool)']
const VESTINGWALLET2_ABI = [
  'constructor(address planeToken_, address xPlaneToken_, address reserveWallet_)',
  'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
  'event Released(uint256 releasedAmount)',
  'event RevokeVesting()',
  'function DURATION() view returns (uint256)',
  'function MAX_TOTAL_SHARE() view returns (uint256)',
  'function START_TIME() view returns (uint256)',
  'function XPLANE_SHARE_MIN() view returns (uint256)',
  'function beneficiariesShare(address) view returns (uint256)',
  'function beneficiary(uint256 index) view returns (address)',
  'function nbBeneficiaries() view returns (uint256)',
  'function nonRevocable() view returns (bool)',
  'function owner() view returns (address)',
  'function planeToken() view returns (address)',
  'function releasable() view returns (uint256)',
  'function release()',
  'function released() view returns (uint256)',
  'function renounceOwnership()',
  'function reserveWallet() view returns (address)',
  'function revoke()',
  'function setToNonRevocable()',
  'function setXPlaneShare(uint256 share)',
  'function totalShare() view returns (uint256)',
  'function transferOwnership(address newOwner)',
  'function updateBeneficiary(address wallet, uint256 newShare)',
  'function updateReserveWallet(address newReserveWallet)',
  'function xPlaneShare() view returns (uint256)',
  'function xPlaneToken() view returns (address)'
]
const WETHREBASING_ABI = [
  'constructor()',
  'error ApproveFromZeroAddress()',
  'error ApproveToZeroAddress()',
  'error ClaimToZeroAddress()',
  'error DistributeFailed(uint256 count, uint256 pending)',
  'error ETHTransferFailed()',
  'error InsufficientAllowance()',
  'error InsufficientBalance()',
  'error InvalidReporter()',
  'error NotClaimableAccount()',
  'error PriceIsInitialized()',
  'error TransferFromZeroAddress()',
  'error TransferToZeroAddress()',
  'event Approval(address indexed owner, address indexed spender, uint256 value)',
  'event Claim(address indexed account, address indexed recipient, uint256 amount)',
  'event Configure(address indexed account, uint8 yieldMode)',
  'event Deposit(address indexed account, uint256 amount)',
  'event EIP712DomainChanged()',
  'event Initialized(uint8 version)',
  'event NewPrice(uint256 price)',
  'event Transfer(address indexed from, address indexed to, uint256 value)',
  'event Withdrawal(address indexed account, uint256 amount)',
  'function DOMAIN_SEPARATOR() view returns (bytes32)',
  'function PERMIT_TYPEHASH() view returns (bytes32)',
  'function REPORTER() view returns (address)',
  'function addValue(uint256 value)',
  'function allowance(address owner, address spender) view returns (uint256)',
  'function approve(address spender, uint256 amount) returns (bool)',
  'function balanceOf(address account) view returns (uint256 value)',
  'function claim(address recipient, uint256 amount) returns (uint256)',
  'function configure(uint8 yieldMode) returns (uint256)',
  'function count() view returns (uint256)',
  'function decimals() view returns (uint8)',
  'function deposit() payable',
  'function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)',
  'function getClaimableAmount(address account) view returns (uint256)',
  'function getConfiguration(address account) view returns (uint8)',
  'function initialize()',
  'function name() view returns (string)',
  'function nonces(address owner) view returns (uint256)',
  'function pending() view returns (uint256)',
  'function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)',
  'function price() view returns (uint256)',
  'function symbol() view returns (string)',
  'function totalSupply() view returns (uint256)',
  'function transfer(address to, uint256 amount) returns (bool)',
  'function transferFrom(address from, address to, uint256 amount) returns (bool)',
  'function version() view returns (string)',
  'function withdraw(uint256 wad)'
]
const XPLANETOKEN_ABI = [
  'constructor(address planeToken_)',
  'event Allocate(address indexed userAddress, address indexed usageAddress, uint256 amount)',
  'event Approval(address indexed owner, address indexed spender, uint256 value)',
  'event ApproveUsage(address indexed userAddress, address indexed usageAddress, uint256 amount)',
  'event CancelRedeem(address indexed userAddress, uint256 xPlaneAmount)',
  'event CollectorshipTransferred(address oldCollector, address newCollector)',
  'event Convert(address indexed from, address to, uint256 amount)',
  'event Deallocate(address indexed userAddress, address indexed usageAddress, uint256 amount, uint256 fee)',
  'event FinalizeRedeem(address indexed userAddress, uint256 xPlaneAmount, uint256 planeAmount)',
  'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
  'event Redeem(address indexed userAddress, uint256 xPlaneAmount, uint256 planeAmount, uint256 duration)',
  'event SetTransferWhitelist(address account, bool add)',
  'event Transfer(address indexed from, address indexed to, uint256 value)',
  'event UpdateDeallocationFee(address indexed usageAddress, uint256 fee)',
  'event UpdateDividendsAddress(address previousDividendsAddress, address newDividendsAddress)',
  'event UpdateRedeemDividendsAddress(address indexed userAddress, uint256 redeemIndex, address previousDividendsAddress, address newDividendsAddress)',
  'event UpdateRedeemSettings(uint256 minRedeemRatio, uint256 maxRedeemRatio, uint256 minRedeemDuration, uint256 maxRedeemDuration, uint256 redeemDividendsAdjustment)',
  'function BLAST() view returns (address)',
  'function BLASTPOINTS() view returns (address)',
  'function MAX_DEALLOCATION_FEE() view returns (uint256)',
  'function MAX_FIXED_RATIO() view returns (uint256)',
  'function USDBBLAST() view returns (address)',
  'function WETHBLAST() view returns (address)',
  'function allocate(address usageAddress, uint256 amount, bytes usageData)',
  'function allocateFromUsage(address userAddress, uint256 amount)',
  'function allowance(address owner, address spender) view returns (uint256)',
  'function approve(address spender, uint256 amount) returns (bool)',
  'function approveUsage(address usage, uint256 amount)',
  'function balanceOf(address account) view returns (uint256)',
  'function cancelRedeem(uint256 redeemIndex)',
  'function claimWethAndUsdbYield(address recipient, uint256 amount)',
  'function collector() view returns (address)',
  'function convert(uint256 amount)',
  'function convertTo(uint256 amount, address to)',
  'function deallocate(address usageAddress, uint256 amount, bytes usageData)',
  'function deallocateFromUsage(address userAddress, uint256 amount)',
  'function decimals() view returns (uint8)',
  'function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)',
  'function dividendsAddress() view returns (address)',
  'function finalizeRedeem(uint256 redeemIndex)',
  'function getPlaneByVestingDuration(uint256 amount, uint256 duration) view returns (uint256)',
  'function getUsageAllocation(address userAddress, address usageAddress) view returns (uint256)',
  'function getUsageApproval(address userAddress, address usageAddress) view returns (uint256)',
  'function getUserRedeem(address userAddress, uint256 redeemIndex) view returns (uint256 planeAmount, uint256 xPlaneAmount, uint256 endTime, address dividendsContract, uint256 dividendsAllocation)',
  'function getUserRedeemsLength(address userAddress) view returns (uint256)',
  'function getXPlaneBalance(address userAddress) view returns (uint256 allocatedAmount, uint256 redeemingAmount)',
  'function increaseAllowance(address spender, uint256 addedValue) returns (bool)',
  'function isTransferWhitelisted(address account) view returns (bool)',
  'function maxRedeemDuration() view returns (uint256)',
  'function maxRedeemRatio() view returns (uint256)',
  'function minRedeemDuration() view returns (uint256)',
  'function minRedeemRatio() view returns (uint256)',
  'function name() view returns (string)',
  'function owner() view returns (address)',
  'function planeToken() view returns (address)',
  'function redeem(uint256 xPlaneAmount, uint256 duration)',
  'function redeemDividendsAdjustment() view returns (uint256)',
  'function renounceOwnership()',
  'function setCollector(address _collector)',
  'function symbol() view returns (string)',
  'function totalSupply() view returns (uint256)',
  'function transfer(address recipient, uint256 amount) returns (bool)',
  'function transferFrom(address sender, address recipient, uint256 amount) returns (bool)',
  'function transferOwnership(address newOwner)',
  'function transferWhitelist(uint256 index) view returns (address)',
  'function transferWhitelistLength() view returns (uint256)',
  'function updateDeallocationFee(address usageAddress, uint256 fee)',
  'function updateDividendsAddress(address dividendsAddress_)',
  'function updateRedeemDividendsAddress(uint256 redeemIndex)',
  'function updateRedeemSettings(uint256 minRedeemRatio_, uint256 maxRedeemRatio_, uint256 minRedeemDuration_, uint256 maxRedeemDuration_, uint256 redeemDividendsAdjustment_)',
  'function updateTransferWhitelist(address account, bool add)',
  'function usageAllocations(address, address) view returns (uint256)',
  'function usageApprovals(address, address) view returns (uint256)',
  'function usagesDeallocationFee(address) view returns (uint256)',
  'function userRedeems(address, uint256) view returns (uint256 planeAmount, uint256 xPlaneAmount, uint256 endTime, address dividendsAddress, uint256 dividendsAllocation)',
  'function xPlaneBalances(address) view returns (uint256 allocatedAmount, uint256 redeemingAmount)'
]
const YIELDBOOSTER_ABI = [
  'constructor(address xPlaneToken_)',
  'event Allocate(address indexed userAddress, address indexed poolAddress, uint256 tokenId, uint256 amount)',
  'event CollectorshipTransferred(address oldCollector, address newCollector)',
  'event Deallocate(address indexed userAddress, address indexed poolAddress, uint256 tokenId, uint256 amount)',
  'event EmergencyWithdraw(address caller, address token, uint256 amount)',
  'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
  'event UpdateForcedDeallocationStatus(address caller, bool status)',
  'event UpdateTotalAllocationFloor(uint256 newFloor)',
  'function BLAST() view returns (address)',
  'function BLASTPOINTS() view returns (address)',
  'function MAX_TOTAL_ALLOCATION_FLOOR() view returns (uint256)',
  'function USDBBLAST() view returns (address)',
  'function WETHBLAST() view returns (address)',
  'function allocate(address userAddress, uint256 amount, bytes data)',
  'function claimWethAndUsdbYield(address recipient, uint256 amount)',
  'function collector() view returns (address)',
  'function deallocate(address userAddress, uint256 amount, bytes data)',
  'function deallocateAllFromPool(address userAddress, uint256 tokenId)',
  'function emergencyWithdraw(address token)',
  'function forceDeallocate()',
  'function forcedDeallocationStatus() view returns (bool)',
  'function getExpectedMultiplier(uint256 maxBoostMultiplier, uint256 lpAmount, uint256 totalLpSupply, uint256 userAllocation, uint256 poolTotalAllocation) view returns (uint256)',
  'function getMultiplier(address poolAddress, uint256 maxBoostMultiplier, uint256 lpAmount, uint256 totalLpSupply, uint256 userAllocation) view returns (uint256)',
  'function getPoolTotalAllocation(address poolAddress) view returns (uint256)',
  'function getUserPosition(address userAddress, address poolAddress, uint256 index) view returns (uint256)',
  'function getUserPositionAllocation(address userAddress, address poolAddress, uint256 tokenId) view returns (uint256)',
  'function getUserPositionsLength(address userAddress, address poolAddress) view returns (uint256)',
  'function getUserTotalAllocation(address userAddress) view returns (uint256)',
  'function owner() view returns (address)',
  'function renounceOwnership()',
  'function setCollector(address _collector)',
  'function setTotalAllocationFloor(uint256 floor)',
  'function totalAllocation() view returns (uint256)',
  'function totalAllocationFloor() view returns (uint256)',
  'function transferOwnership(address newOwner)',
  'function updateForcedDeallocationStatus(bool status)',
  'function usersPositionsAllocation(address, address, uint256) view returns (uint256)',
  'function xPlaneToken() view returns (address)'
]

export { EIP2612_ABI, BALANCEFETCHER_ABI, BLAST_ABI, BLASTPOINTS_ABI, DIVIDENDSV2_ABI, ERC20_ABI, ERC20BYTES32_ABI, FAIRAUCTION_ABI, HYPERPOOL_ABI, HYPERPOOLFACTORY_ABI, LAUNCHPAD_ABI, LPNFTPOOL_ABI, LPNFTPOOLFACTORY_ABI, MULTICALL3_ABI, PLANARLIQUIDITYPOOL_ABI, PLANARLIQUIDITYPOOLFACTORY_ABI, PLANARLIQUIDITYPOOLROUTER_ABI, PLANARMASTER_ABI, PLANARTESTNETTOKEN_ABI, PLANARTESTNETTOKENFACTORY_ABI, PLANARTESTNETTOKENFAUCET_ABI, PLANETOKEN_ABI, POSITIONHELPER_ABI, PRESALE_ABI, PRICECONSUMERV3_ABI, PROTOCOLEARNINGS_ABI, REFUND_ABI, UNISWAPINTERFACEMULTICALL_ABI, UNISWAPV2ERC20_ABI, VESTINGWALLET2_ABI, WETHREBASING_ABI, XPLANETOKEN_ABI, YIELDBOOSTER_ABI }
